#! /usr/bin/env bash

# set -x

dry_run=0

while getopts ":nh" opt; do
	case ${opt} in
		n) # process option n
			dry_run=1
			;;
		h) # process option h
			echo "Usage: $0 [-n] [-h]"
			exit 0
			;;
		*) # fall back
		    echo "error in command line parsing" >&2
			echo "Usage: $0 [-n] [-h]"
			exit 1
	esac
done


CURRENT_BRANCH=`git rev-parse --abbrev-ref HEAD`
MERGED=`git branch --merged | grep -v "^\* $CURRENT_BRANCH"`
for branch in $MERGED
do
	# if [[ $branch != $CURRENT_BRANCH ]]; then
	# 	git branch -d $branch
	# fi
	if [ "$dry_run" -eq 1 ]; then
		echo "will delete branch $branch"
	else
		git branch -d $branch
	fi
done

# For a one-liner, we can use something like
# git branch --merged | grep -v '^\*' | xargs -n1 git branch -d
# But it will throw an error when there are no branches to delete
#
# We can work around that error, by doing
# git branch --merged | grep -v '^\*' | (xargs -n1 git branch -d || true)
# which will still complain that there is no branch to delete but atleast exit
# succesfully.
#
# Using a for loop not only makes the logic more explicit but gives flexibility
# to run the script in dry mode.

# Initial copy is from https://github.com/santi-h/git-scripts/blob/master/git_clean_merged
# getopts
# * https://unix.stackexchange.com/questions/433801/add-some-dry-run-option-to-script
# * https://sookocheff.com/post/bash/parsing-bash-script-arguments-with-shopts/
