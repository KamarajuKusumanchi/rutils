#! /usr/bin/env bash

# Objective:
# rebase a git repository to the remote.
# Requirement:
# It should work even if there are any uncommitted changes in the local repository.
# If the repository needs a push or if it has diverged, then inform about it but
# do not update the local repository.
#

# This script is adapted from the code snippet in
# https://stackoverflow.com/a/3278427/6305733 .
# Check the link to understand how it works.

set -x

function do_pull()
{
    # --autostash is available only if git version is >= 2.6
    local git_version=`git --version | cut -f3 -d' '`
    local major_version=`echo $git_version | cut -f1 -d.`
    local minor_version=`echo $git_version | cut -f2 -d.`

    if (( $major_version >= 2 )) && (( $minor_version >= 6 )); then
        local use_autostash=1
    else
        local use_autostash=0
    fi

    if [ $use_autostash == 1 ]; then
        git pull --rebase --autostash -v origin
    else
        git stash
        git pull --rebase -v origin
        git stash pop
    fi
}

git remote update

UPSTREAM=${1:-'@{u}'}
LOCAL=$(git rev-parse @)
REMOTE=$(git rev-parse "$UPSTREAM")
BASE=$(git merge-base @ "$UPSTREAM")

if [ $LOCAL = $REMOTE ]; then
    echo "Up-to-date"
elif [ -z $BASE ] || [ $LOCAL = $BASE ]; then
    # The "-z $BASE" checks if the BASE variable is empty. If it is empty then
    # pull the latest version.  This happens, for example, when trying to
    # update a local copy of <https://github.com/stamparm/ipsum>.
    echo "Need to pull"
    # git stash
    # git pull --rebase
    # git stash pop
    do_pull
    NEWLOCAL=$(git rev-parse @)
    if [ $NEWLOCAL = $REMOTE ]; then
        echo "Pull successful"
    fi
elif [ $REMOTE = $BASE ]; then
    echo "Need to push"
else
    echo "Diverged"
fi


